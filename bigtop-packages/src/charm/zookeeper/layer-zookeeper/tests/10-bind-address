#!/usr/bin/python3

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
import amulet
import re


class TestBindClientPort(unittest.TestCase):
    """
    Test to verify that we can bind to listen for client connections
    on a specific interface.
    """

    @classmethod
    def setUpClass(cls):
        cls.d = amulet.Deployment(series='xenial')

        cls.d.add('jdk', charm='openjdk')
        cls.d.add('zookeeper', charm='zookeeper', units=3)
        cls.d.relate('zookeeper:java', 'jdk:java')

        cls.d.setup(timeout=900)
        cls.d.sentry.wait(timeout=1800)
        cls.unit = cls.d.sentry['zookeeper'][0]

    def test_bind_port(self):
        """
        Test to verify that we update client port bindings successfully.

        """
        self.d.configure('zookeeper', {'network_interface': 'eth0'})
        self.d.sentry.wait_for_messages({'zookeeper': 'updating network interface'}, timeout=60)
        self.d.sentry.wait_for_messages({'zookeeper': 'ready (3 zk nodes)'}, timeout=60)
        ret = self.unit.run(
            'grep clientPortAddress /etc/zookeeper/conf/zoo.cfg')[0]
        matcher = re.compile(
            "^clientPortAddress=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*")

        self.assertTrue(matcher.match(ret))

        # Verify that smoke tests still run
        smk_uuid = self.unit.action_do("smoke-test")
        output = self.d.action_fetch(smk_uuid, full_output=True)
        assert "completed" in output['status']

    @unittest.skip(
        'Broken handling of 0.0.0.0 bindings upstream, in Zookeeper project.')
    def test_reset_bindings(self):
        """
        Verify that we can reset the client port bindings to 0.0.0.0

        """
        self.d.configure('zookeeper', {'network_interface': '0.0.0.0'})
        self.d.sentry.wait_for_messages({'zookeeper': 'updating network interface'}, timeout=60)
        self.d.sentry.wait_for_messages({'zookeeper': 'ready (3 zk nodes)'}, timeout=60)
        ret = self.unit.run(
            'grep clientPortAddress /etc/zookeeper/conf/zoo.cfg')[0]

        matcher = re.compile("^clientPortAddress=0\.0\.0\.0.*")
        self.assertTrue(matcher.match(ret))

        # Verify that smoke tests still run
        smk_uuid = self.unit.action_do("smoke-test")
        output = self.d.action_fetch(smk_uuid, full_output=True)
        assert "completed" in output['status']


if __name__ == '__main__':
    unittest.main()
