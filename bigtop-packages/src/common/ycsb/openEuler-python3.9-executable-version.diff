diff -Naur YCSB-0.17.0/bin/ycsb YCSB-0.17.0-support-python3/bin/ycsb
--- YCSB-0.17.0/bin/ycsb	2022-11-18 11:02:45.499567870 +0800
+++ YCSB-0.17.0-support-python3/bin/ycsb	2022-11-18 10:57:45.191567870 +0800
@@ -1,4 +1,4 @@
-#!/usr/bin/env python2
+#!/usr/bin/env python
 #
 # Copyright (c) 2012 - 2015 YCSB contributors. All rights reserved.
 #
@@ -16,6 +16,7 @@
 # LICENSE file.
 #
 
+from __future__ import print_function
 import errno
 import fnmatch
 import io
@@ -28,7 +29,7 @@
     mod = __import__('argparse')
     import argparse
 except ImportError:
-    print >> sys.stderr, '[ERROR] argparse not found. Try installing it via "pip".'
+    print('[ERROR] argparse not found. Try installing it via "pip".', file=sys.stderr)
     exit(1)
 
 BASE_URL = "https://github.com/brianfrankcooper/YCSB/tree/master/"
@@ -121,27 +122,27 @@
 }
 
 def usage():
-    output = io.BytesIO()
-    print >> output, "%s command database [options]" % sys.argv[0]
+    output = io.StringIO()
+    print(u"%s command database [options]" % sys.argv[0], file=output)
 
-    print >> output, "\nCommands:"
+    print(u"\nCommands:", file=output)
     for command in sorted(COMMANDS.keys()):
-        print >> output, "    %s %s" % (command.ljust(14),
-                                        COMMANDS[command]["description"])
+        print(u"    %s %s" % (command.ljust(14),
+                                        COMMANDS[command]["description"]), file=output)
 
-    print >> output, "\nDatabases:"
+    print(u"\nDatabases:", file=output)
     for db in sorted(DATABASES.keys()):
-        print >> output, "    %s %s" % (db.ljust(14), BASE_URL +
-                                        db.split("-")[0])
+        print(u"    %s %s" % (db.ljust(14), BASE_URL +
+                                        db.split("-")[0]), file=output)
 
-    print >> output, "\nOptions:"
+    print(u"\nOptions:", file=output)
     for option in sorted(OPTIONS.keys()):
-        print >> output, "    %s %s" % (option.ljust(14), OPTIONS[option])
+        print(u"    %s %s" % (option.ljust(14), OPTIONS[option]), file=output)
 
-    print >> output, """\nWorkload Files:
+    print(u"""\nWorkload Files:
     There are various predefined workloads under workloads/ directory.
     See https://github.com/brianfrankcooper/YCSB/wiki/Core-Properties
-    for the list of workload properties."""
+    for the list of workload properties.""", file=output)
 
     return output.getvalue()
 
@@ -177,18 +178,18 @@
         if cmd is None:
             cmd = popenargs[0]
         error = subprocess.CalledProcessError(retcode, cmd)
-        error.output = output
+        error.output = output.decode()
         raise error
-    return output
+    return output.decode()
 
 def debug(message):
-    print >> sys.stderr, "[DEBUG] ", message
+    print("[DEBUG] ", message, file=sys.stderr)
 
 def warn(message):
-    print >> sys.stderr, "[WARN] ", message
+    print("[WARN] ", message, file=sys.stderr)
 
 def error(message):
-    print >> sys.stderr, "[ERROR] ", message
+    print("[ERROR] ", message, file=sys.stderr)
 
 def find_jars(dir, glob='*.jar'):
     jars = []
@@ -225,7 +226,7 @@
         # the last module will be the datastore binding
         line = [x for x in mvn_output.splitlines() if x.startswith("classpath=")][-1:]
         return line[0][len("classpath="):]
-    except subprocess.CalledProcessError, err:
+    except subprocess.CalledProcessError as err:
         error("Attempting to generate a classpath from Maven failed "
               "with return code '" + str(err.returncode) + "'. The output from "
               "Maven follows, try running "
@@ -333,7 +334,7 @@
                      main_classname, "-db", db_classname] + remaining)
     if command:
         ycsb_command.append(command)
-    print >> sys.stderr, " ".join(ycsb_command)
+    print(" ".join(ycsb_command), file=sys.stderr)
     try:
         return subprocess.call(ycsb_command)
     except OSError as e:
