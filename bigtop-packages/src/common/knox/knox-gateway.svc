# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DAEMON="knox-gateway"
DESC="Knox Gateway"
EXEC_PATH="/usr/lib/knox/bin/gateway.sh"
SVC_USER="knox"
PIDFILE="/var/run/knox/knox-gateway.pid"

generate_prestart_script() {
cat <<'__EOT__'
  runuser -s /bin/bash $SVC_USER -c "$EXEC_PATH start"
__EOT__
}

generate_prestop_script() {
cat <<'__EOT__'
  su -s /bin/bash $SVC_USER -c "$EXEC_PATH stop"
__EOT__
}

generate_start() {
cat <<'__EOT__'
start() {
  KNOX_HOME_DIR="/usr/lib/knox"
  CLI_PATH="$KNOX_HOME_DIR/bin/knoxcli.sh"
  LOG_FILE=/var/log/knox/${DAEMON}.out
  DATA_DIR="/var/lib/knox/data"

  [ -x ${EXEC_PATH} ] || exit $ERROR_PROGRAM_NOT_INSTALLED
  [ -d $KNOX_HOME_DIR/conf ] || exit $ERROR_PROGRAM_NOT_CONFIGURED

  if [ ! -f $DATA_DIR/security/master ]; then
  runuser -s /bin/bash $SVC_USER -c \
  "$CLI_PATH create-master --generate --force"
  fi

  runuser -s /bin/bash $SVC_USER -c \
  "KNOX_GATEWAY_RUNNING_IN_FOREGROUND=true \
  nohup nice -n 0 $EXEC_PATH start > $LOG_FILE 2>&1 < /dev/null & "'echo $! '"> $PIDFILE"

  sleep 3
  checkstatusofproc
  RETVAL=$?

  if [ $RETVAL -eq 0 ]; then
    touch $LOCKFILE
    log_success_msg "Started ${DESC}: "
  else
        log_failure_msg "Failed to start ${DESC}. Return value: $RETVAL"
  fi
  return $RETVAL
}
__EOT__
}


generate_stop() {
cat <<'__EOT__'
stop() {
  runuser -s /bin/bash $SVC_USER -c "$EXEC_PATH stop"
  RETVAL=$?

  if [ $RETVAL -eq $RETVAL_SUCCESS ]; then
         log_success_msg "Stopped ${DESC}: "
         rm -f $LOCKFILE $PIDFILE
 else
         log_failure_msg "Failed to stop ${DESC}. Return value: $RETVAL."
 fi
}
__EOT__
}
