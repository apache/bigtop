#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Startup script for Elasticsearch
#
### BEGIN INIT INFO
# Provides:          elasticsearch
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Elasticsearch start-stop-daemon
# Description:       Elasticsearch start-stop-daemon
### END INIT INFO

. /lib/lsb/init-functions

if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

# Autodetect JAVA_HOME if not defined
. /usr/lib/bigtop-utils/bigtop-detect-javahome

PATH=/bin:/usr/bin:/sbin:/usr/sbin
BIGTOP_DEFAULTS_DIR=${BIGTOP_DEFAULTS_DIR-/etc/default}
NAME=elasticsearch
DESC="Elasticsearch Server"
DEFAULT=${BIGTOP_DEFAULTS_DIR}/${NAME}

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi

if [ -r /etc/default/rcS ]; then
	. /etc/default/rcS
fi


# The following variables can be overwritten in $DEFAULT

ES_USER=elasticsearch
ES_GROUP=elasticsearch

# Directory where the Elasticsearch binary distribution resides
ES_HOME=/usr/lib/${NAME}

# Additional Java OPTS
#ES_JAVA_OPTS=

# Maximum number of open files
MAX_OPEN_FILES=65536

# Maximum amount of locked memory
#MAX_LOCKED_MEMORY=

# Elasticsearch log directory
LOG_DIR=/var/log/${NAME}

# Elasticsearch data directory
DATA_DIR=/var/lib/${NAME}

# Elasticsearch configuration directory
CONF_DIR=/etc/${NAME}/conf

# Maximum number of VMA (Virtual Memory Areas) a process can own
MAX_MAP_COUNT=262144

# Elasticsearch PID file directory
PID_DIR="/var/run/elasticsearch"

# End of variables that can be overwritten in $DEFAULT

# overwrite settings from default file
[ -n "${BIGTOP_DEFAULTS_DIR}" -a -r ${BIGTOP_DEFAULTS_DIR}/${NAME} ] && . ${BIGTOP_DEFAULTS_DIR}/${NAME}

if [ "${ES_USER}" != "elasticsearch" ] || [ "${ES_GROUP}" != "elasticsearch" ]; then
    echo "WARNING: ES_USER and ES_GROUP are deprecated and will be removed in the next major version of Elasticsearch, got: [${ES_USER}:${ES_GROUP}]"
fi

# Define other required variables
PID_FILE="${PID_DIR}/${NAME}.pid"
DAEMON=${ES_HOME}/bin/elasticsearch
DAEMON_OPTS="-d -p ${PID_FILE} -Edefault.path.logs=${LOG_DIR} -Edefault.path.data=${DATA_DIR} -Edefault.path.conf=${CONF_DIR}"

if [ -z "$ES_JVM_OPTIONS" ]; then
    for jvm_options in "$CONF_DIR"/jvm.options; do
        if [ -r "$jvm_options" ]; then
            ES_JVM_OPTIONS=$jvm_options
            break
        fi
    done
fi
export ES_JAVA_OPTS
export JAVA_HOME
export ES_INCLUDE
export ES_JVM_OPTIONS


checkJava() {
	if [ -x "${JAVA_HOME}/bin/java" ]; then
		JAVA="${JAVA_HOME}/bin/java"
	else
		JAVA=`which java`
	fi

	if [ ! -x "${JAVA}" ]; then
		echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
		exit 1
	fi
}

case "$1" in
  start)
	checkJava

	pid=`pidofproc -p $PID_FILE $NAME`
	if [ -n "$pid" ] ; then
		log_warning_msg "Already running."
		exit 0
	fi

	# Ensure that the PID_DIR exists (it is cleaned at OS startup time)
	if [ -n "${PID_DIR}" ] && [ ! -e "${PID_DIR}" ]; then
		mkdir -p ${PID_DIR} && chown ${ES_USER}:${ES_GROUP} ${PID_DIR}
	fi
	if [ -n "${PID_FILE}" ] && [ ! -e "${PID_FILE}" ]; then
		touch ${PID_FILE} && chown ${ES_USER}:${ES_GROUP} ${PID_FILE}
	fi

	if [ -n "${MAX_OPEN_FILES}" ]; then
		ulimit -n ${MAX_OPEN_FILES}
	fi

	if [ -n "${MAX_LOCKED_MEMORY}" ]; then
		ulimit -l ${MAX_LOCKED_MEMORY}
	fi

	if [ -n "${MAX_MAP_COUNT}" -a -f /proc/sys/vm/max_map_count -a "${MAX_MAP_COUNT}" -gt $(cat /proc/sys/vm/max_map_count) ]; then
		sysctl -q -w vm.max_map_count=${MAX_MAP_COUNT}
	fi

	# Start Daemon
	echo -n $"Starting $DESC ..."
	/sbin/runuser ${ES_USER} -s /bin/bash -c "${DAEMON} ${DAEMON_OPTS}"
	return=$?
	if [ $return -eq 0 ]; then
		i=0
		timeout=10
		# Wait for the process to be properly started before exiting
		until { kill -0 `cat "${PID_FILE}"`; } >/dev/null 2>&1
		do
			sleep 2
			i=$(($i + 1))
			if [ $i -gt $timeout ]; then
				log_failure_msg 1
				exit 1
			fi
		done
	fi
	log_success_msg
	exit $return
	;;
  stop)
	echo -n "Stopping ${DESC}"

	if [ -f "${PID_FILE}" ]; then
		killproc -p "${PID_FILE}" $NAME
		if [ $? -eq 1 ]; then
			log_warning_msg "${DESC} is not running but pid file exists, cleaning up"
		elif [ $? -eq 3 ]; then
			PID="`cat ${PID_FILE}`"
			log_failure_msg "Failed to stop $DESC (pid $PID)"
			exit 1
		fi
		rm -f "${PID_FILE}"
	else
		log_warning_msg "(not running)"
	fi
	;;
  status)
	status="0"
	pidofproc -p $PID_FILE $NAME >/dev/null || status="$?"
	if [ "$status" = 0 ]; then
		log_success_msg "$DESC is running"
	elif [ "$status" = 4 ]; then
		log_failure_msg "could not access PID file for ${DESC}"
	else
		log_failure_msg "$DESC is not running"
	fi
	exit $status
	;;
  restart|force-reload)
	if [ -f "${PID_FILE}" ]; then
		$0 stop
	fi
	$0 start
	;;
  *)
	log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
	exit 1
	;;
esac

exit 0
