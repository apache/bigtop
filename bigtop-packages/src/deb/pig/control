# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Source: pig
Section: misc
Priority: extra
Maintainer: Bigtop <bigtop-dev@incubator.apache.org>
Build-Depends: debhelper (>= 6), ant, ant-optional
Standards-Version: 3.8.0
Homepage: http://pig.apache.org/

Package: pig
Architecture: all
Depends: hadoop, bigtop-utils
Description: A platform for analyzing large data sets using Hadoop
 Pig is a platform for analyzing large data sets that consists of a high-level language
 for expressing data analysis programs, coupled with infrastructure for evaluating these
 programs. The salient property of Pig programs is that their structure is amenable
 to substantial parallelization, which in turns enables them to handle very large data sets.
 .
 At the present time, Pig's infrastructure layer consists of a compiler that produces
 sequences of Map-Reduce programs, for which large-scale parallel implementations already
 exist (e.g., the Hadoop subproject). Pig's language layer currently consists of a textual
 language called Pig Latin, which has the following key properties:
 .
 * Ease of programming
    It is trivial to achieve parallel execution of simple, "embarrassingly parallel" data
    analysis tasks. Complex tasks comprised of multiple interrelated data transformations
    are explicitly encoded as data flow sequences, making them easy to write, understand,
    and maintain.
 * Optimization opportunities
    The way in which tasks are encoded permits the system to optimize their execution
    automatically, allowing the user to focus on semantics rather than efficiency.
 * Extensibility
    Users can create their own functions to do special-purpose processing. 
